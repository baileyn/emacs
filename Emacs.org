#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

## Editor
### Core UI
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode t)
  (menu-bar-mode -1)
  (setq visible-bell t)
#+end_src

### Line Numbers
#+begin_src emacs-lisp
  (column-number-mode)

  (global-display-line-numbers-mode t)
  (setq display-line-numbers 'relative)

  (dolist (mode '(term-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

### Font
#+begin_src emacs-lisp
    (set-face-attribute 'default nil :font "Fira Code Retina" :height 110)
    (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height 110)
    (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 110 :weight 'regular)
#+end_src

### Global Keybinds
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

## Plugins
### Core
#### Use Package
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

### Quality of Life
#### Which Key
#+begin_src emacs-lisp
  (use-package which-key
    :diminish
    :init (which-key-mode)
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

#### Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

#### Diminish
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

### Keybinding
#### General
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-create-definer njb/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "SPC"))

  ;; (general-define-key
  ;;   "C-M-k" 'something
  ;;   "C-M-j" 'counsel-switch-buffer)
#+end_src

#### Evil Mode (vim)
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump t)
    :config
    (evil-mode 1)
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package undo-tree
    :after evil
    :diminish
    :config
    (evil-set-undo-system 'undo-tree)
    (global-undo-tree-mode 1))
#+end_src

### Completion
#### Ivy
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :init
    (ivy-mode 1)
    :bind (("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill)))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src

#### Counsel
#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-ibuffer)
	   ("C-x C-f" . counsel-find-file)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history)))
#+end_src

### Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

### Theming
#### Doom
#+begin_src emacs-lisp
  (use-package doom-themes)

  (use-package all-the-icons)
  (use-package doom-modeline
    :after all-the-icons
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

  (load-theme 'doom-dark+ t)
#+end_src

