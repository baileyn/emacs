#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* General Configurations
** Variables
#+begin_src emacs-lisp
  (setq inhibit-startup-message t) ; Don't show the splash screen
  (setq pz/default-font-size 110)
  (setq pz/default-variable-font-size 110)
#+end_src

** Interface
#+begin_src emacs-lisp
  ;; Clean up the Emacs interfaces
  (menu-bar-mode -1) ; Remove the menu bar
  (tool-bar-mode -1) ; Remove the tool bar
  (scroll-bar-mode -1) ; Remove the scroll bar
  (global-display-line-numbers-mode 1) ; Display line numbers
  (column-number-mode 1) ; Display column numbers in modeline

  (hl-line-mode 1) ; Highlight the current line
  (blink-cursor-mode -1) ; Disable cursor blinking

  (setq history-length 25)
  (savehist-mode 1)

  (global-auto-revert-mode 1) ; Automatically revert buffer when file changes
					  ; (global-auto-revert-non-file-buffers t) ; Automatically revert Dired and other buffers
#+end_src

** Custom File for Variables (ew)
#+begin_src emacs-lisp
  ;; Use another custom variables file so we don't pollute init.el
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)
#+end_src

** Keymaps
*** Normal Mode
#+begin_src emacs-lisp
  (define-key evil-normal-state-local-map (kbd "gc") 'comment-line)
#+end_src

** Load Time Metrics
#+begin_src emacs-lisp
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "*** Emacs loaded in %s with %d garbage collections."
		       (format "%.2f seconds"
			       (float-time
				(time-subtract after-init-time before-init-time)))
		       gcs-done)))
#+end_src

* Plugins
** use-package 
#+begin_src emacs-lisp
  ;; Load package manager and add melpa package registry
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)

  ;; Refresh package contents
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Bootstrap use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t) ; Always ensure package is installed
#+end_src

** Doom Themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  (use-package all-the-icons
    :ensure t)

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))

  (set-face-attribute 'default nil :font "Fira Code Retina" :height pz/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height pz/default-font-size)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height pz/default-variable-font-size :weight 'regular)
#+end_src

** No littering -- tidy configuration storage
#+begin_src emacs-lisp
  (use-package no-littering)
  (setq auto-save-file-name-transforms
	`((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src

** Evil Mode (vim bindings)
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-chard-and-join)

    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (add-hook 'org-mode-hook
	    (lambda () (setq evil-auto-indent nil)))
  (add-hook 'evil-normal-state-entry-hook
	    (lambda () (setq display-line-numbers 'relative)))
  (add-hook 'evil-insert-state-entry-hook
	    (lambda () (setq display-line-numbers t)))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

** Autocompletion
*** Ivy
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :init
    (ivy-mode 1)
    :bind (:map ivy-minibuffer-map
		("TAB" . ivy-alt-done)
		("C-l" . ivy-alt-done)
		("C-j" . ivy-next-line)
		("C-k" . ivy-previous-line)
		:map ivy-switch-buffer-map
		("C-k" . ivy-previous-line)
		("C-l" . ivy-done)
		("C-d" . ivy-switch-buffer-kill)
		:map ivy-reverse-i-search-map
		("C-k" . ivy-previous-line)
		("C-d" . ivy-reverse-i-search-kill)))

  (use-package ivy-rich			;
    :init
    (ivy-rich-mode 1))
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-ibuffer)
	   ("C-x C-f" . counsel-find-file)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil))
#+end_src

** Helpful command/variable information
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** Which key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

** Rainbow delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Development
*** Navigation

#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/projects")
      (setq projectile-project-search-path '("~/projects")))
    (setq projectile-switch-project-action #'projectile-dired))
#+end_src

*** Core

**** LSP Client
#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :commands (lsp lsp-deferred)
    :config
    (lsp-enable-which-key-integration t))
  (use-package lsp-ui :commands lsp-ui-mode
    :hook (lsp-mode . lsp-ui-mode))
  (use-package lsp-ivy :commands lsp-ivy-owkrspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
  (use-package dap-mode)
#+end_src

**** Snippets
#+begin_src emacs-lisp
  (use-package yasnippet)
#+end_src

**** Completion Handler
#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
		("<tab>" . company-complete-selection))
    (:map lsp-mode-map
	  ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 3)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

*** Languages

**** Python

#+begin_src emacs-lisp
  (use-package lsp-pyright
    :hook (python-mode . (lambda ()
			   (require 'lsp-pyright)
			   (lsp))))
  (use-package pyvenv
    :config
    (pyvenv-mode 1))
#+end_src

**** Rust

#+begin_src emacs-lisp
  (use-package rustic)
#+end_src

**** TypeScript

#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))
#+end_src

**** Jenkinsfile
#+begin_src emacs-lisp
  (use-package jenkinsfile-mode
    :mode "Jenkinsfile.*\\'")
#+end_src
